@startuml Sources

' Source
interface Source<T> {
  state: T
  state$: Observable<T>
}

abstract class SourceEnclosure<T> {
  #state: T
  #state$: Observable<T>
  #constructor()
  #next()
}

SuperSource <|.. Source
SuperSource <|-- SourceEnclosure
abstract class SuperSource<T> {
  +state: T
  +state$: Observable<T>
  #constructor()
  #next()
}

SourceSubject <|-- SuperSource
class SourceSubject<T> {
  +state: T
  +state$: Observable<T>
  +constructor()
  +next()
}

' Machine
interface Machine {
  active: boolean
  active$: Observable<boolean>
  enable()
  disable()
}

abstract class MachineEnclosure {
  #active: boolean
  #active$: Observable<boolean>
  #constructor()
  #enable()
  #disable()
}

SuperMachine <|.. Machine
SuperMachine <|-- MachineEnclosure
abstract class SuperMachine {
  +active: boolean
  +active$: Observable<boolean>
  #constructor()
  +enable()
  +disable()
}

MachineSubject <|-- SuperMachine
class MachineSubject {
  +active: boolean
  +active$: Observable<boolean>
  +constructor()
  +enable()
  +disable()
}

' Resource
interface Resource<T> {
  state: T
  state$: Observable<T>
  active: boolean
  active$: Observable<boolean>
  enable()
  disable()
}

abstract class ResourceEnclosure<T> {
  #state: T
  #state$: Observable<T>
  #active: boolean
  #active$: Observable<boolean>
  #constructor()
  #next()
  #enable()
  #disable()
}

SuperResource <|.. Resource
SuperResource <|-- ResourceEnclosure
abstract class SuperResource<T> {
  +state: T
  +state$: Observable<T>
  +active: boolean
  +active$: Observable<boolean>
  #constructor()
  #next()
  +enable()
  +disable()
}

ResourceSubject <|-- SuperResource
class ResourceSubject<T> {
  +state: T
  +state$: Observable<T>
  +active: boolean
  +active$: Observable<boolean>
  +constructor()
  +next()
  +enable()
  +disable()
}

@enduml
